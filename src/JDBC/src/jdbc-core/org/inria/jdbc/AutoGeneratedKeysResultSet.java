package org.inria.jdbc;

import java.sql.Blob;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

public class AutoGeneratedKeysResultSet implements ResultSet
{
	private boolean nextCalled;
	private int id;
	private static final String ID_GLOBAL_META_COL_NAME = "IdGlobal";

	private final static ResultSetMetaData meta = new ResultSetMetaData()
	{
		@Override
		public int getColumnCount() throws SQLException
		{
			return 1;
		}
		@Override
		public String getColumnLabel( int column ) throws SQLException
		{
			if ( column == 1 )
				return ID_GLOBAL_META_COL_NAME;
			throw new SQLException( "Invalid column index: " + column );
		}
		@Override
		public String getColumnName( int column ) throws SQLException
		{
			return getColumnLabel( column );
		}
		@Override
		public int getColumnType( int column ) throws SQLException
		{
			if ( column == 1 )
				return java.sql.Types.INTEGER;
			throw new SQLException( "Invalid column index: " + column );
		}
		@Override
		public String getColumnTypeName( int column ) throws SQLException
		{
			if ( column == 1 )
				return org.inria.jdbc.ResultSetMetaData.TYPENAME_NUMBER;
			throw new SQLException( "Invalid column index: " + column );
		}
	};

	static
	{
		Util.setEPO( meta );
	}

	/**
	 * Special constructor for ResultSet containing a generated IDGlobal
	 *
	 * @param autoGeneratedIdGlobal
	 */
	AutoGeneratedKeysResultSet( int autoGeneratedIdGlobal )
	{
		id = autoGeneratedIdGlobal;
	}

	@Override
	public void close() throws SQLException
	{
		// no DBMS link: no close
	}

	@Override
	public int findColumn( String columnLabel ) throws SQLException
	{
		if ( ID_GLOBAL_META_COL_NAME.equals(columnLabel) )
			return 1;
		throw new SQLException( "Column name unknown: " + columnLabel );
	}

	@Override
	public boolean wasNull() throws SQLException
	{
		return false;
	}

	@Override
	public byte[] getBytes( int columnIndex ) throws SQLException
	{
		throw new SQLException( "Invalid column index: " + columnIndex );
	}
	@Override
	public byte[] getBytes( String columnLabel ) throws SQLException
	{
		throw new SQLException( "Column name/type unknown: " + columnLabel );
	}
	@Override
	public Date getDate( int columnIndex ) throws SQLException
	{
		throw new SQLException( "Invalid column index: " + columnIndex );
	}
	@Override
	public Date getDate( String columnLabel ) throws SQLException
	{
		throw new SQLException( "Column name/type unknown: " + columnLabel );
	}
	@Override
	public int getInt( int columnIndex ) throws SQLException
	{
		if ( columnIndex == 1 )
			return id;
		throw new SQLException( "Invalid column index: " + columnIndex );
	}
	@Override
	public int getInt( String columnLabel ) throws SQLException
	{
		if ( ID_GLOBAL_META_COL_NAME.equals(columnLabel) )
			return id;
		throw new SQLException( "Column name unknown: " + columnLabel );
	}
	@Override
	public ResultSetMetaData getMetaData() throws SQLException
	{
		return meta;
	}
	@Override
	public String getString( int columnIndex ) throws SQLException
	{
		throw new SQLException( "Invalid column index: " + columnIndex );
	}
	@Override
	public String getString( String columnLabel ) throws SQLException
	{
		throw new SQLException( "Column name/type unknown: " + columnLabel );
	}
	@Override
	public Blob getBlob( int columnIndex ) throws SQLException
	{
		throw new SQLException( "Invalid column index: " + columnIndex );
	}
	@Override
	public Blob getBlob( String columnLabel ) throws SQLException
	{
		throw new SQLException( "Column name/type unknown: " + columnLabel );
	}

	@Override
	public boolean next() throws SQLException
	{
		if ( nextCalled )
			return false;
		nextCalled = true;
		return true;
	}

	@Override
	public boolean relative( int rows ) throws SQLException
	{
		if ( rows < 0 )
			throw new SQLException( "Negative relative movements not supported" );
		if ( rows == 1 )
			return next();
		return rows == 0;
	}
}
