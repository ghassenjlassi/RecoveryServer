package org.inria.jdbc;

import java.sql.Blob;
import java.sql.Date;
import java.sql.SQLException;
import java.util.Calendar;

import org.inria.database.QEPng;

/*=============================================================================

Name: PreparedStatement.java

Abs:  Implements the interface java.sql.PreparedStatement

Auth: 05-01-2008, Kevin JACQUEMIN (KJ):
Rev:  23-04-2008, Kevin JACQUEMIN (KJ):

=============================================================================*/

public class PreparedStatement extends Statement implements java.sql.PreparedStatement
{
	private static final int MAX_STRING_SIZE = 410;

	private	int autoGeneratedKeys;
	private Object[] ep_params_objs;

	PreparedStatement( DBMS client, int qepNo, int autoGeneratedKeys ) throws SQLException
	{
		super( client );
		this.autoGeneratedKeys = autoGeneratedKeys;
		this.ep_params_count = QEPng.getParamCnt( qepNo );
		this.ep_params_real_size = this.ep_params_count * EP_PARAMS_DEF_SIZE;
		this.ep_static = Integer.toString( qepNo );
		this.ep_params_objs = ( this.ep_params_count > 0 ) ? new Object[ this.ep_params_count ] : null;
	}

	private void finalizeEPParams()
	{
		if ( this.ep_params_count == 0 )
			return;
		int count = this.ep_params_count,
			pos = this.ep_params_real_size;
		Object o;
		byte[] ba;
		boolean var_size; // true if size of parameter is variable and
				// must be specified in the first two bytes of parameter buffer
		for ( int i=0; i<count; ++i )
		{
			var_size = true;
			o = this.ep_params_objs[ i ];
			if ( o != null )
			{
				if		( o instanceof String )
					ba = ((String)o).getBytes();
				else if ( o instanceof org.inria.jdbc.Blob.BlobId )
				{
					var_size = false;
					ba = ((org.inria.jdbc.Blob.BlobId)o).id;
				}
				else
					ba = (byte[])o;	// instance of byte[]
				if ( var_size )
				{
					DBMSFactory.short2bytea( (short)ba.length, plan_params, pos );
					System.arraycopy( ba, 0, plan_params, pos + 2, ba.length );
				}
				else
					System.arraycopy( ba, 0, plan_params, pos, ba.length );
				DBMSFactory.int2bytea( pos, plan_params, i * EP_PARAMS_DEF_SIZE + 1 );
				pos += ba.length + ( var_size ? 2 : 0 );
			}
		}
		this.ep_params_real_size = pos;
	}

	@Override
	public java.sql.ResultSet executeQuery() throws SQLException
	{
		finalizeEPParams();
		return super.query();
	}

	@Override
	public int executeUpdate() throws SQLException
	{
		finalizeEPParams();
		return super.update( autoGeneratedKeys );
	}

	/////////////////////////////////////////////////////

	@Override
	public void setString( int parameterIndex, String x ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( x == null )
			plan_params[ index ] = Macro.NULL_CHAR;
		else
		{
			plan_params[ index ] = Macro.T_CHAR;
			if ( x.length() > MAX_STRING_SIZE )
			{
				System.out.println( "EP String parameter too long:" );
				System.out.println( x );
				System.out.println( "Truncated: " + x.length() +
									" to " + MAX_STRING_SIZE + " chars" );
				x = x.substring( 0, MAX_STRING_SIZE );
			}
			this.ep_params_objs[ parameterIndex - 1 ] = x;
		}
	}

	@Override
	public void setBytes( int parameterIndex, byte[] x ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( x == null )
			plan_params[ index ] = Macro.NULL_BINARY;
		else
		{
			plan_params[ index ] = Macro.T_BINARY;
			this.ep_params_objs[ parameterIndex - 1 ] = x;
		}
	}

	@Override
	public void setDate( int parameterIndex, Date x ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( x == null )
		{
			plan_params[ index ] = Macro.NULL_DATE;
			return;
		}
		plan_params[ index ] = Macro.T_DATE;
		// transform x from Date to Calendar
		Calendar cal = Calendar.getInstance();
		cal.setTime( x );
		// get the year (2 bytes) and put it in to the byte array
		DBMSFactory.short2bytea( (short)( cal.get( Calendar.YEAR ) ), plan_params, index + 1 );
		// get the month (1 byte) and put it in to the byte array
		plan_params[ index + 3 ] = (byte)( cal.get( Calendar.MONTH ) + 1 );
		// get the day (1 byte) and put it in to the byte array
		plan_params[ index + 4 ] = (byte)( cal.get( Calendar.DAY_OF_MONTH ) );
	}

	/**
	 * Proprietary method to speed-up....
	 * FIXME: remove that! It's too ugly :-(
	 * Used in DBMS/src/com/gemalto/dmsp/DBUtil.java
	 */
	public void setRawDate( int parameterIndex, String s ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( s == null )
			plan_params[ index ] = Macro.NULL_DATE;
		else
		{
			plan_params[ index ] = Macro.T_DATE;
			int firstDash = s.indexOf( '-' );
			int secondDash = s.indexOf( '-', firstDash + 1 );
			if ( firstDash > 0 && secondDash > 0 && secondDash < s.length() - 1 )
			{
				DBMSFactory.short2bytea(
						(short)Integer.parseInt( s.substring(0, firstDash) ),
						plan_params,
						index + 1 );
				plan_params[ index + 3 ] = (byte)Integer.parseInt(
						s.substring( firstDash + 1, secondDash ) );
				plan_params[ index + 4 ] = (byte)Integer.parseInt(
						s.substring( secondDash + 1 ) );
			}
			else
				throw new SQLException( "Invalid raw date" );
		}
	}

	@Override
	public void setInt( int parameterIndex, int x ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		plan_params[ index ] = Macro.T_NUMBER;
		DBMSFactory.int2bytea( x, plan_params, index + 1 );
	}

	@Override
	public void setNull( int parameterIndex, int type ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		switch ( type ) {
		case java.sql.Types.CHAR 	:
			plan_params[ index ] = Macro.NULL_CHAR;
			break;
		case java.sql.Types.DATE 	:
			plan_params[ index ] = Macro.NULL_DATE;
			break;
		case java.sql.Types.INTEGER :
			plan_params[ index ] = Macro.NULL_NUMBER;
			break;
		case java.sql.Types.BINARY  :
			plan_params[ index ] = Macro.NULL_BINARY;
			break;
		case java.sql.Types.BLOB	:
			plan_params[ index ] = Macro.NULL_BLOB;
			break;
		case java.sql.Types.VARCHAR :
			plan_params[ index ] = Macro.NULL_VARCHAR;
			break;
		default :
			throw new SQLException( "unknown SQL type: " + type );
		}
	}

	@Override
	public void setBlob( int parameterIndex, Blob x ) throws SQLException
	{
		int index = ( parameterIndex - 1 ) * EP_PARAMS_DEF_SIZE;
		if ( x == null )
		{
			plan_params[ index ] = Macro.NULL_BLOB;
			return;
		}
		plan_params[ index ] = Macro.T_BLOB;
		this.ep_params_objs[ parameterIndex - 1 ] = ((org.inria.jdbc.Blob)x).getId();
	}
}
